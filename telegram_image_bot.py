import os
import base64
import asyncio
import requests
import sqlite3
from typing import Optional
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters

# Load environment variables
load_dotenv()

# === CONFIG ===
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_MODEL = os.getenv("GEMINI_MODEL", "gemini-1.5-flash")
GEMINI_ENDPOINT = f"https://generativelanguage.googleapis.com/v1beta/models/{GEMINI_MODEL}:generateContent"

DB_PATH = "fruits.db"

# === PROMPT ===
VIETNAMESE_PROMPT = (
    "B·∫°n l√† h·ªá th·ªëng nh·∫≠n di·ªán h√¨nh ·∫£nh. "
    "H√£y x√°c ƒë·ªãnh lo·∫°i tr√°i c√¢y trong ·∫£nh v√† tr·∫£ l·∫°i duy nh·∫•t t√™n lo·∫°i tr√°i c√¢y b·∫±ng ti·∫øng Vi·ªát, "
    "kh√¥ng k√®m c√¢u gi·∫£i th√≠ch, ch·ªâ 1 t·ª´ ho·∫∑c c·ª•m t·ª´ ng·∫Øn (v√≠ d·ª•: 'chu·ªëi', 'xo√†i', 'cam')."
)

# === DATABASE ===
def get_fruit_info(fruit_name: str) -> Optional[dict]:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT name, price, description FROM fruits WHERE LOWER(name)=?", (fruit_name.lower(),))
    row = cursor.fetchone()
    conn.close()
    if row:
        return {"name": row[0], "price": row[1], "description": row[2]}
    return None

# === GEMINI ===
def _build_gemini_request_body(image_b64: str, mime_type: str) -> dict:
    return {
        "contents": [
            {
                "role": "user",
                "parts": [
                    {"text": VIETNAMESE_PROMPT},
                    {
                        "inline_data": {
                            "mime_type": mime_type,
                            "data": image_b64,
                        }
                    },
                ],
            }
        ]
    }

def call_gemini_api(image_bytes: bytes, mime_type: str) -> Optional[str]:
    if not GEMINI_API_KEY:
        return None

    image_b64 = base64.b64encode(image_bytes).decode("utf-8")
    body = _build_gemini_request_body(image_b64, mime_type)
    params = {"key": GEMINI_API_KEY}

    try:
        response = requests.post(GEMINI_ENDPOINT, params=params, json=body, timeout=60)
        response.raise_for_status()
        data = response.json()
    except requests.RequestException as e:
        print("‚ùå L·ªói khi g·ªçi Gemini API:", e)
        return None

    try:
        candidates = data.get("candidates", [])
        if candidates:
            parts = candidates[0].get("content", {}).get("parts", [])
            for part in parts:
                if "text" in part:
                    return part["text"].strip().lower()
    except Exception as e:
        print("‚ö†Ô∏è L·ªói x·ª≠ l√Ω ph·∫£n h·ªìi:", e)

    return None

# === TELEGRAM HANDLERS ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üçé Xin ch√†o! G·ª≠i cho t√¥i m·ªôt b·ª©c ·∫£nh tr√°i c√¢y üçá, t√¥i s·∫Ω nh·∫≠n di·ªán v√† cho b·∫°n bi·∫øt th√¥ng tin chi ti·∫øt!"
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    status_msg = await update.message.reply_text("‚è≥ ƒêang nh·∫≠n di·ªán h√¨nh ·∫£nh, vui l√≤ng ch·ªù...")

    try:
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        image_bytes = await file.download_as_bytearray()
        mime_type = "image/jpeg"
    except Exception as e:
        await status_msg.edit_text("‚ùå Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh.", parse_mode="Markdown")
        return

    fruit_name = await asyncio.to_thread(call_gemini_api, bytes(image_bytes), mime_type)

    if not fruit_name:
        await status_msg.edit_text("‚ö†Ô∏è T√¥i kh√¥ng th·ªÉ nh·∫≠n di·ªán ch√≠nh x√°c lo·∫°i tr√°i c√¢y n√†y.", parse_mode="Markdown")
        return

    info = get_fruit_info(fruit_name)
    if info:
        await status_msg.edit_text(
            f"**K·∫øt qu·∫£ nh·∫≠n di·ªán:** {info['name'].capitalize()}\n"
            f"**Gi√° b√°n:** {info['price']}\n"
            f"**M√¥ t·∫£:** {info['description']}",
            parse_mode="Markdown"
        )
    else:
        await status_msg.edit_text(
            f"**K·∫øt qu·∫£ nh·∫≠n di·ªán:** {fruit_name.capitalize()}\n"
            f"‚ùå Hi·ªán ch∆∞a c√≥ th√¥ng tin v·ªÅ lo·∫°i tr√°i c√¢y n√†y trong c∆° s·ªü d·ªØ li·ªáu.",
            parse_mode="Markdown"
        )

# === MAIN ===
def main():
    if not TELEGRAM_BOT_TOKEN:
        raise RuntimeError("Thi·∫øu TELEGRAM_BOT_TOKEN. Vui l√≤ng th√™m v√†o .env")

    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, handle_photo))
    print("ü§ñ Bot ƒëang ch·∫°y... G·ª≠i ·∫£nh tr√°i c√¢y ƒë·ªÉ ki·ªÉm tra.")
    app.run_polling()

if __name__ == "__main__":
    main()
