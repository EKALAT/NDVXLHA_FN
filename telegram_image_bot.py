import os
import base64
import asyncio
import requests
from typing import Optional
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters

# Load environment variables
load_dotenv()

# === CONFIG ===
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GEMINI_MODEL = os.getenv("GEMINI_MODEL", "gemini-2.5-pro")
GEMINI_ENDPOINT = f"https://generativelanguage.googleapis.com/v1beta/models/{GEMINI_MODEL}:generateContent"

# === PROMPT ===
VIETNAMESE_PROMPT = (
    "B·∫°n l√† h·ªá th·ªëng nh·∫≠n di·ªán h√¨nh ·∫£nh. "
    "H√£y m√¥ t·∫£ ng·∫Øn g·ªçn (1-2 c√¢u) b·∫±ng ti·∫øng Vi·ªát v·ªÅ ƒë·ªëi t∆∞·ª£ng ch√≠nh trong h√¨nh. "
    "N·∫øu c√≥ th·ªÉ, h√£y n√™u lo·∫°i v·∫≠t th·ªÉ ho·∫∑c danh m·ª•c. "
    "Ch·ªâ tr·∫£ l·ªùi n·ªôi dung k·∫øt qu·∫£, kh√¥ng k√®m gi·∫£i th√≠ch."
)

# === BOT HANDLERS ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üëã Xin ch√†o! G·ª≠i cho t√¥i m·ªôt b·ª©c ·∫£nh, t√¥i s·∫Ω gi√∫p b·∫°n nh·∫≠n di·ªán v√† m√¥ t·∫£ n√≥ b·∫±ng ti·∫øng Vi·ªát."
    )

def _build_gemini_request_body(image_b64: str, mime_type: str) -> dict:
    return {
        "contents": [
            {
                "role": "user",
                "parts": [
                    {"text": VIETNAMESE_PROMPT},
                    {
                        "inline_data": {
                            "mime_type": mime_type,
                            "data": image_b64,
                        }
                    },
                ],
            }
        ]
    }

def call_gemini_api(image_bytes: bytes, mime_type: str) -> Optional[str]:
    if not GEMINI_API_KEY:
        return None

    image_b64 = base64.b64encode(image_bytes).decode("utf-8")
    body = _build_gemini_request_body(image_b64, mime_type)
    params = {"key": GEMINI_API_KEY}

    try:
        response = requests.post(GEMINI_ENDPOINT, params=params, json=body, timeout=60)
        response.raise_for_status()
        data = response.json()
    except requests.RequestException as e:
        print("‚ùå L·ªói khi g·ªçi Gemini API:", e)
        return None

    try:
        candidates = data.get("candidates", [])
        if candidates:
            parts = candidates[0].get("content", {}).get("parts", [])
            for part in parts:
                if "text" in part:
                    return part["text"].strip()
    except Exception as e:
        print("‚ö†Ô∏è L·ªói x·ª≠ l√Ω ph·∫£n h·ªìi:", e)

    return None

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    status_msg = await update.message.reply_text("‚è≥ ƒêang nh·∫≠n di·ªán h√¨nh ·∫£nh, vui l√≤ng ch·ªù...")

    try:
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        image_bytes = await file.download_as_bytearray()
        mime_type = "image/jpeg"
    except Exception as e:
        await status_msg.edit_text("**K·∫øt qu·∫£:** Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh.", parse_mode="Markdown")
        return

    result_text = await asyncio.to_thread(call_gemini_api, bytes(image_bytes), mime_type)

    if result_text:
        await status_msg.edit_text(f"**K·∫øt qu·∫£:** {result_text}", parse_mode="Markdown")
    else:
        await status_msg.edit_text("**K·∫øt qu·∫£:** Xin l·ªói, t√¥i kh√¥ng th·ªÉ nh·∫≠n di·ªán ch√≠nh x√°c h√¨nh ·∫£nh n√†y.", parse_mode="Markdown")

# === MAIN ===
def main():
    if not TELEGRAM_BOT_TOKEN:
        raise RuntimeError("Thi·∫øu TELEGRAM_BOT_TOKEN. Vui l√≤ng th√™m v√†o .env")

    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, handle_photo))
    print("ü§ñ Bot ƒëang ch·∫°y... G·ª≠i ·∫£nh ƒë·∫øn bot ƒë·ªÉ ki·ªÉm tra.")
    app.run_polling()

if __name__ == "__main__":
    main()
